var1 = 1
var2 = "aaaa"
var3 = var1

funcx(var2)
funcx(var2, var2)
funcx(var2 + var2)
[var1]
[var3]

func = 123

# Functions not supported yet
def func(var1):
    r = var1
    return r

def f2(var1):
    x = var1 + var2
    return var1

var20 = 2
self.var20 = 2

# this should be ignored
x = 7
for i in range(3):
    x = i
print(x)

global var2
var1 += "a"

aaaa = 7
def f(b, c, aaaa):
    x=aaaa

def f(b, c, aaaa=7):
    x=aaaa

def f(b, c, d=aaaa):
    x=aaaa

sth.aaaa()
var2.decode()

var4, var5 = 1, "a"
(var6, var7) = 8, True

[var4, var5, var6, var7]

while aaaa:
    pass

if a == aaaa:
    pass

var8 = 9
while var8:
    pass
    var8 -= 1

var9 = 9
while var9:
   pass
   c = 3

var10 = "aaaa"
var10 = omg_a_function(sth)
func(var10)

encrypted_payload = b"abcdefghijklmnopqrstuvwxyz"
encrypted_payload = some_func(key=b"\x95",nonce=b"\xff").decrypt(encrypted_payload[12:])

lIIIlIIIIlllIlIIII=gc
lIllIIIlIlIIIIlIlI=lIIIlIIIIlllIlIIII.get_referents

var11 = 'a'
''.join(var11 for var11 in range(10))
