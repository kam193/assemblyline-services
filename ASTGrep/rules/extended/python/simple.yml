---
# yaml-language-server: $schema=https://raw.githubusercontent.com/ast-grep/ast-grep/main/schemas/rule.json

id: python-simple-decode-bytes
message: Apply decoding
language: Python
rule:
  any:
    - pattern: 'b"$DATA".decode($ENCODING)'
    - pattern: "b'$DATA'.decode($ENCODING)"
    - pattern: 'b"$DATA".decode()'
    - pattern: "b'$DATA'.decode()"

constraints:
  ENCODING:
    kind: string

metadata:
  extended-obfuscation: yes
  alone-unimportant: yes
  deobfuscate: |
    {
      "type": "fix-generate",
      "steps": [
        {"func": "encode", "source": "DATA", "output": "OUT"},
        {"func": "decode", "source": "OUT", "encoding": "ENCODING"},
        {"func": "quote", "source": "OUT"}
      ]
    }

---
id: python-simple-builtin-getattr
message: Uses getattr to obfuscate using a builtin function
language: Python
rule:
  kind: call
  all:
    - has:
        field: function
        pattern: getattr
    - has:
        kind: argument_list
        all:
          - has:
              nthChild: 1
              any:
                - has:
                    stopBy: end
                    kind: string_content
                    regex: builtins
                - pattern: builtins
                - pattern: __builtins__
          # TODO: what with case like:
          # getattr(__import__(b"builtins"), str("aaa"))("print('hello')")
          - has:
              nthChild: 2
              pattern: $DATA
              kind: string

metadata:
  extended-obfuscation: yes
  confirmed-obfuscation: yes
  deobfuscate: |
    {
      "type": "fix-generate",
      "steps": [
        {"func": "dequote", "source": "DATA"}
      ]
    }

---
# yaml-language-server: $schema=https://raw.githubusercontent.com/ast-grep/ast-grep/main/schemas/rule.json

id: python-nonascii-identifiers
message: Identifiers with non-ascii characters are often use to obfuscate the code
language: Python
rule:
  any:
    - pattern: $VAR
      kind: identifier
      regex: "[^a-zA-Z_0-9]+"

# constraints:
#   VAR:
#     regex: "[^a-zA-Z_0-9]+"

metadata:
  extended-obfuscation: yes
  alone-unimportant: yes
  deobfuscate: |
    {
      "type": "fix-generate",
      "source": "VAR",
      "steps": [
        {"func": "rename", "prefix": "renamed_var"}
      ]
    }

---
# yaml-language-server: $schema=https://raw.githubusercontent.com/ast-grep/ast-grep/main/schemas/rule.json

id: python-import-encoded
message: Import obfuscated module
language: Python
rule:
  any:
    - pattern: __import__($ARGS)
      kind: call
      has:
        kind: argument_list
        regex: ^\(['"]{1,3}(\\x[0-9a-fA-F][0-9a-fA-F]){1,}['"]{1,3}\)$
    - pattern: globals()[$ARGS]
      has:
        stopBy: end
        kind: string_content
        pattern: $ARGS_STRING
        not:
          regex: "__file__"
      not:
        inside:
          kind: assignment
          has:
            field: right
            pattern: $ARGS_STRING


constraints:
  ARGS:
    kind: string

metadata:
  extended-obfuscation: yes
  confirmed-obfuscation: yes
  deobfuscate: |
    {
      "type": "fix-generate",
      "steps": [
        {"func": "dequote", "source": "ARGS"}
      ]
    }

---
# yaml-language-server: $schema=https://raw.githubusercontent.com/ast-grep/ast-grep/main/schemas/rule.json

id: python-simple-field-through-vars
message: Uses vars to obfuscate getting field from an object
language: Python
rule:
  kind: subscript
  all:
    - has:
        field: value
        kind: call
        pattern: vars($OBJECT)
    - has:
        field: subscript
        kind: string
        pattern: $FIELD

metadata:
  extended-obfuscation: yes
  confirmed-obfuscation: yes
  deobfuscate: |
    {
      "type": "fix-generate",
      "steps": [
        {"func": "dequote", "source": "FIELD"},
        {"func": "concat", "sources": ["OBJECT", "FIELD"]}
      ]
    }

---
# yaml-language-server: $schema=https://raw.githubusercontent.com/ast-grep/ast-grep/main/schemas/rule.json

id: python-use-variables-through-locals-globals
message: Variable value is used using locals or globals function
language: Python
rule:
  kind: subscript
  has:
    field: value
    kind: call
    any:
      - pattern: globals()
      - pattern: locals()
      - pattern: vars()
  all:
    - has:
        field: subscript
        kind: string
        pattern: $VARIABLE
        has:
          kind: string_content
          pattern: $VARIABLE_CONTENT
    - not:
        all:
          - inside:
              kind: assignment
              field: left
          - inside:
              kind: assignment
              has:
                field: right
                pattern: $VARIABLE_CONTENT

metadata:
  extended-obfuscation: yes
  confirmed-obfuscation: no
  deobfuscate: |
    {
      "type": "fix-generate",
      "steps": [
        {"func": "dequote", "source": "VARIABLE"}
      ]
    }

---
# yaml-language-server: $schema=https://raw.githubusercontent.com/ast-grep/ast-grep/main/schemas/rule.json

id: python-static-bytes-from-hex
message: Evaluating decoding static data from hex
language: Python
rule:
  kind: call
  all:
    - has:
        field: function
        pattern: bytes.fromhex
    - has:
        field: arguments
        has:
          nthChild: 1
          kind: string
          pattern: $DATA

metadata:
  extended-obfuscation: yes
  confirmed-obfuscation: no
  deobfuscate: |
    {
      "type": "fix-generate",
      "steps": [
        {"func": "dequote", "source": "DATA"},
        {"func": "encode", "source": "DATA", "encoding": "hex"},
        {"func": "quote", "source": "DATA"}
      ]
    }