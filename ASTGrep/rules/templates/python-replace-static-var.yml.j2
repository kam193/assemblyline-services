{% set preprocessed_val = VALUE | replace("$", "{{{DOLLARPLACEHOLDER}}}") | tojson | strip_problematic %}
{% if tpl_in_function|default(false) %}
{% set _func = FUNCTION|default(None) %}
{% endif %}
id: python-substitute-static-vars-{{TEMPLATE_COUNTER}}-{{ vars.get("FUNCTION", None) }}
message: Substitute static variables
language: Python
rule:
  kind: identifier
  pattern: {{ VAR }}
{% if (tpl_in_function|default(false) and _func) or IF_CONDITION|default(None) %}
  all:
{% if tpl_in_function|default(false) and _func %}
    - inside:
        stopBy: end
        kind: function_definition
        has:
          field: name
          pattern: {{ _func }}
{% endif %}
{% if IF_CONDITION|default(None) %}
    - inside:
        stopBy: end
        kind: block
        inside:
          kind: if_statement
          has:
            field: condition
            pattern: {{ IF_CONDITION | tojson }}
{% endif %}
{% endif %}
  not:
    any:
      - nthChild: 1
        any:
          - inside:
              kind: assignment
          - inside:
              kind: keyword_argument
          - inside:
              kind: default_parameter
{% if not tpl_in_function|default(false) or not _func %}
          - inside:
              kind: function_definition
{% endif %}
          - inside:
              kind: class_definition
          - inside:
              kind: augmented_assignment
          - inside:
              kind: call # for now
          - inside:
              kind: for_statement
      - inside:
          # kind: expression_statement
          stopBy: end
          follows:
            kind: global_statement
            stopBy: end
            has:
              kind: identifier
              pattern: {{ VAR }}
      - inside:
          stopBy: end
          any:
            - kind: import_statement
            - kind: import_from_statement
            - kind: ERROR
            - kind: function_definition
              has:
                field: parameters
                any:
                  - has:
                      kind: identifier
                      pattern: {{ VAR }}
                  - has:
                      stopBy: end
                      kind: identifier
                      nthChild: 1
                      pattern: {{ VAR }}
            - kind: lambda
              has:
                field: parameters
                has:
                  stopBy: end
                  kind: identifier
                  pattern: {{ VAR }}
            - kind: generator_expression
              matches: var_used_in_for
            - kind: list_comprehension
              matches: var_used_in_for
            - kind: for_statement
              has:
                field: left
                any:
                  - pattern: {{ VAR }}
                  - has:
                      pattern: {{ VAR }}
            #- kind: assignment
            #  has:
            #    field: left
            #    pattern: {{ VAR }}
      - inside:
          kind: parameters
      - inside:
          kind: lambda_parameters
      - inside:
          kind: global_statement
      - inside:
          kind: while_statement
          has:
              stopBy: end
              any:
                - kind: assignment
                - kind: augmented_assignment
              has:
                field: left
                pattern: {{ VAR }}
      - inside:
          inside:
            kind: assignment
            field: left
      - nthChild: 2
        inside:
          kind: attribute
      - inside:
          kind: expression_statement
          stopBy: end
          follows:
            stopBy: end
            kind: expression_statement
            has:
              kind: assignment
              has:
                field: left
                pattern: {{ VAR }}
              not:
                has:
                  field: right
                  any:
                    - kind: string
                    - kind: integer
                    - kind: "true"
                    - kind: "false"
                    - kind: float
                    - kind: "none"
                    - pattern: {{ preprocessed_val }}
                  # TODO: https://stackoverflow.com/questions/92438/stripping-non-printable-characters-from-a-string-in-python
                  # TODO: good regex sanitization to exclude only specific string
                  #has:
                  #  kind: string_content
                  #  {# regex: {{ VALUE | replace('?', '\\?') | replace('(', '\\(') | replace(')', '\\)') | replace('[', '\\[') | replace(']', '\\]') | replace('{', '\\{') | replace('}', '\\}') | replace('*', '\\*') | replace("$", "{{{DOLLARPLACEHOLDER}}}") | tojson }} #}
      - inside:
          kind: expression_statement
          stopBy: end
          follows:
            stopBy: end
            any:
              - kind: for_statement
            has:
              stopBy: end
              kind: assignment
              has:
                field: left
                pattern: {{ VAR }}
# TODO: better way to detect if the variable is used in a loop
# or if it is used in a condition that modifies the variable
#      - inside:
#          stopBy: end
#          kind: if_statement
#          has:
#            kind: block
#            has:
#              stopBy: end
#              kind: expression_statement
#              all:
#                - any:
#                    - has:
#                        kind: augmented_assignment
#                    - has:
#                        kind: assignment
#                - has:
#                    has:
#                      field: left
#                      pattern: {{ VAR }}

utils:
  var_used_in_for:
    has:
      kind: for_in_clause
      has:
        field: left
        any:
          - kind: identifier
            pattern: {{ VAR }}
          - has:
              pattern: {{ VAR }}

fix: {{ preprocessed_val }}
