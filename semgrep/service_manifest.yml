name: Semgrep
version: $SERVICE_TAG
description: |
  Scan source code using Semgrep rules to look for suspicious patterns.
enabled: true

accepts: code/*
rejects: empty
stage: CORE
category: Static Analysis
uses_tags: false
file_required: true
timeout: 150
is_external: false

config:
  # Maximum system memory in MiB to use (...) when running a rule on a single file
  SEMGREP_RAM_LIMIT_MB: "1200"
  SEMGREP_RULE_TIMEOUT: "5"
  # The maximum time to wait for results from Semgrep
  SEMGREP_CLI_TIMEOUT: 90
  SEMGREP_LSP_TIMEOUT: 30
  # Number of rules that can timeout before the file is skipped
  SEMGREP_TIMEOUT_TRESHOLD: 10
  # Maximum size for a file to be scanned by Semgrep
  SEMGREP_MAX_TARGET_BYTES: 5000000 # 5MB
  # LSP keeps the semgrep process running in the background
  # reducing the startup time for subsequent requests
  # but may be less stable
  USE_LANGUAGE_SERVER_PROTOCOL: true
  # if the LSP fails to scan the file, try to scan it with the CLI
  FALLBACK_TO_SCAN: true

# submission_params:
#   - default: "auto"
#     name: platform
#     type: list
#     value: "auto"
#     list: ["auto", "linux"]

# -1000: safe
# 0 - 299: informative
# 300 - 699: suspicious
# 700 - 999: highly suspicious
# >= 1000: malicious

heuristics:
  - description: Suspicious code pattern
    filetype: "*"
    heur_id: 1
    name: Suspicious code pattern
    score: 300
    max_score: 500
  - description: Malicious code pattern
    filetype: "*"
    heur_id: 2
    name: Malicious code pattern
    score: 1000
    max_score: 2000
  - description: Informative code pattern
    filetype: "*"
    heur_id: 3
    name: Informative code pattern
    score: 10
    max_score: 50
  - description: |
      Semgrep failed to scan the file. The file may be too large, too complex
      or it's an issue with the Semgrep OSS engine.
    filetype: "*"
    heur_id: 5
    name: Semgrep failed
    score: 0

docker_config:
  image: ${REGISTRY}ghcr.io/kam193/assemblyline-service-semgrep:$SERVICE_TAG
  cpu_cores: 1.0
  ram_mb: 1536
  ram_mb_min: 256
  allow_internet_access: false

update_config:
  update_interval_seconds: 86400 # 1 day
  generates_signatures: true
  signature_delimiter: custom
  custom_delimiter: "\n#SIGNATURE-DELIMITER#\n\n"
  wait_for_update: true
  sources:
    # GuardDog from DataDog has rules to detect malicious code in Python & npm packages
    - uri: https://github.com/DataDog/guarddog.git
      name: GuardDog
      pattern: ".*/guarddog/analyzer/.*\\.yml"
      git_branch: main
      sync: true

dependencies:
  updates:
    container:
      ram_mb: 512
      ram_mb_min: 128
      allow_internet_access: true
      command: ["python", "-m", "service.updater"]
      image: ${REGISTRY}ghcr.io/kam193/assemblyline-service-semgrep:$SERVICE_TAG
      ports: ["5003"]
    run_as_core: true
